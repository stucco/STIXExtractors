package STIXExtractor;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;

import org.jsoup.Jsoup;
import org.jsoup.parser.Parser;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;

import STIXExtractor.MalwareDomainListExtractor;

import org.junit.Test;

import static org.junit.Assert.*;

import org.mitre.stix.stix_1.STIXPackage;

/**
 * Unit test for Malware Domain List extractor.
 */				
public class MalwareDomainListExtractorTest extends STIXExtractor {
	
	private Map<String,String> loadContent(String entryName, boolean localMode) throws IOException{
		Map<String,String> pageContent = new HashMap<String,String>();
		String filePath = "./src/test/resources/malwaredomainlist/";
		Charset charset = Charset.defaultCharset();
		if(localMode){
			File infoFD = new File(filePath + entryName);
			String content = FileUtils.readFileToString(infoFD, charset);
			pageContent.put("content", content);
		}
		else{
			URL u;
			u = new URL("http://www.malwaredomainlist.com/mdl.php?search="+entryName);
			pageContent.put("content", IOUtils.toString(u));
		}
		return pageContent;
	}
	
	/**
	 * Test with "alsoknowsit.com" sample data
	 */
	@Test
	public void test_alsoknowsit_com() {
		System.out.println();
		System.out.println("STIXExtractor.MalwareDomainListExtractorTest.test_alsoknowsit_com()");

		String entryName = "alsoknowsit.com";
		boolean localMode = true;
		String content;
		
		try {
			Map<String,String> pageContent = loadContent(entryName, localMode);
			content = pageContent.get("content");
			
			MalwareDomainListExtractor mdlTsExt = new MalwareDomainListExtractor(content);
			STIXPackage stixPackage = mdlTsExt.getStixPackage();

			System.out.println("Validating StixPackage");
			assertTrue(mdlTsExt.validate(stixPackage));

			Document doc = Jsoup.parse(stixPackage.toXMLString(), "", Parser.xmlParser());

			System.out.println();
			System.out.println("Testing Malware content");
			Elements ttp = doc.select("stix|TTP");
			System.out.println("Testing Title");
			assertEquals(ttp.select("ttp|Title").text(), "Malware");
			System.out.println("Testing Name");
			assertEquals(ttp.select("ttp|Name").text(), "MalwareDomainList_alsoknowsit.com");
			System.out.println("Testing Description");
			assertEquals(ttp.select("ttp|Description").text(), "Zeus config file");
			System.out.println("Testing URL");
			assertEquals(ttp.select("ttp|Tool > cyboxCommon|Name").text(), "alsoknowsit.com/wp-files/config.bin");
			System.out.println("Testing Source");
			assertEquals(ttp.select("stixCommon|Identity > stixCommon|Name").text(), "MalwareDomainList");
			System.out.println("Testing Malware -> Address relation");
			String idref = ttp.select("cybox|Observable").first().attr("idref");
			Element address = doc.select("cybox|Observable[id = " + idref + "]").first();

			System.out.println();
			System.out.println("Testing Address");
			System.out.println("Testing Title");
			assertEquals(address.select("cybox|Title").text(), "Address");
			System.out.println("Testing Source");
			assertEquals(address.select("cybox|Observable_Source > cyboxCommon|Information_Source_Type").text(), "MalwareDomainList");
			System.out.println("Testing Description");
			assertEquals(address.select("cybox|Object > cybox|Description").text(), "80.250.114.239, port 80");
				
			System.out.println("Testing Address -> IP reference");
			String ipId = address.select("SocketAddressObj|IP_Address").attr("object_reference");
			Element ipElement = doc.select("[id= " + ipId + "]").first();
			String ip = ipElement.select("AddressObj|Address_Value").text();
			System.out.println("Testing IP content");
			System.out.println("Testing Title");
			assertEquals(ipElement.select("cybox|Title").text(), "IP");
			System.out.println("Testing Source");
			assertEquals(ipElement.select("cyboxCommon|Information_Source_Type").text(), "MalwareDomainList");
			System.out.println("Testing IP Long (ID)");
			assertEquals(ipElement.select("cybox|Object").attr("id"), "stucco:ip-" + ipToLong(ip));
			System.out.println("Testing IP String");
			assertEquals(ip, "80.250.114.239");
			System.out.println("Testing Description");
			assertEquals(ipElement.select("cybox|Description").text(), "80.250.114.239");

			System.out.println("Testing Address -> Port reference");
			String portId = address.select("SocketAddressObj|Port").attr("object_reference");
			Element portElement = doc.select("[id= " + portId + "]").first();
			System.out.println("Testing Title");
			assertEquals(portElement.select("cybox|Title").text(), "Port");
			System.out.println("Testing Source");
			assertEquals(portElement.select("cyboxCommon|Information_Source_Type").text(), "MalwareDomainList");
			System.out.println("Testing Port value");
			assertEquals(portElement.select("PortObj|Port_Value").text(), "80");
			System.out.println("Testing Description");
			assertEquals(portElement.select("cybox|Description").text(), "80");

			System.out.println("Testing Address -> DNSName");
			Elements dnsRefs = address.select("cybox|Related_Object");
			assertTrue(dnsRefs.size() == 2);
			List<String> dnsList = new ArrayList<String>();
			for (Element dnsRef : dnsRefs) {
				String dnsId = dnsRef.attr("idref");
				Element dnsElement = doc.select("[id= " + dnsId + "]").first();
				dnsList.add(dnsElement.select("DomainNameObj|Value").text());
			}
			assertTrue(dnsList.contains("alsoknowsit.com"));
			assertTrue(dnsList.contains("kvm.arconet.ee."));
			
			System.out.println();
			System.out.println("Testing DNSName");
			Element dnsElement = doc.select("cybox|Observable:has(DomainNameObj|Value:contains(alsoknowsit.com))").first();
			System.out.println("Testing Title");
			assertEquals(dnsElement.select("cybox|title").text(), "DNSName");
			System.out.println("Testing Name");
			assertEquals(dnsElement.select("DomainNameObj|Value").text(), "alsoknowsit.com");
			System.out.println("Testing Description");
			assertEquals(dnsElement.select("cybox|description").text(), "alsoknowsit.com");
			System.out.println("Testing Source");
			assertEquals(dnsElement.select("cyboxcommon|information_source_type").text(), "MalwareDomainList");
				
			System.out.println();
			System.out.println("Testing DNSName");
			dnsElement = doc.select("cybox|Observable:has(DomainNameObj|Value:contains(kvm.arconet.ee.))").first();
			System.out.println("Testing Title");
			assertEquals(dnsElement.select("cybox|title").text(), "DNSName");
			System.out.println("Testing Name");
			assertEquals(dnsElement.select("DomainNameObj|Value").text(), "kvm.arconet.ee.");
			System.out.println("Testing Description");
			assertEquals(dnsElement.select("cybox|description").text(), "kvm.arconet.ee.");
			System.out.println("Testing Source");
			assertEquals(dnsElement.select("cyboxcommon|information_source_type").text(), "MalwareDomainList");

		} catch (IOException e) {
			e.printStackTrace();
			fail("IOException");
		} catch (Exception e) {
			e.printStackTrace();
			fail("Exception");
		}
	}
	
	/**
	 * Test with "46.183.221.58" sample data
	 */
	@Test
	public void test_46_183_221_58() {
		System.out.println();
		System.out.println("STIXExtractor.MalwareDomainListExtractorTest.test_46_183_221_58()");

		String entryName = "46.183.221.58";
		boolean localMode = true;
		String content;
		
		try {
			Map<String,String> pageContent = loadContent(entryName, localMode);
			content = pageContent.get("content");
			
			MalwareDomainListExtractor mdlTsExt = new MalwareDomainListExtractor(content);
			STIXPackage stixPackage = mdlTsExt.getStixPackage();
					
			System.out.println("Validating StixPackage");
			assertTrue(mdlTsExt.validate(stixPackage));

			Document doc = Jsoup.parse(stixPackage.toXMLString(), "", Parser.xmlParser());

			System.out.println();
			System.out.println("Testing Malware content");
			Element ttp = doc.select("stix|TTP").first();
			System.out.println("Testing Title");
			assertEquals(ttp.select("ttp|Title").text(), "Malware");
			System.out.println("Testing Name");
			assertEquals(ttp.select("ttp|Name").text(), "MalwareDomainList_46.183.221.58");
			System.out.println("Testing Description");
			assertEquals(ttp.select("ttp|Description").text(), "Trojan.Zbot");
			System.out.println("Testing URL");
			Elements urls = ttp.select("ttp|Tool > cyboxCommon|Name");
			List<String> urlsList = new ArrayList<String>();
			for (Element url : urls) {
				urlsList.add(url.text());
			}
			assertTrue(urlsList.contains("46.183.221.58/snow/bot.exe"));
			assertTrue(urlsList.contains("46.183.221.58/we/bot.exe"));
			System.out.println("Testing Source");
			assertEquals(ttp.select("stixCommon|Identity > stixCommon|Name").text(), "MalwareDomainList");
			System.out.println("Testing Malware -> Address relation");
			String idref = ttp.select("cybox|Observable").first().attr("idref");
			Element address = doc.select("cybox|Observable[id = " + idref + "]").first();

			System.out.println();
			System.out.println("Testing Address");
			System.out.println("Testing Title");
			assertEquals(address.select("cybox|Title").text(), "Address");
			System.out.println("Testing Source");
			assertEquals(address.select("cybox|Observable_Source > cyboxCommon|Information_Source_Type").text(), "MalwareDomainList");
			System.out.println("Testing Description");
			assertEquals(address.select("cybox|Object > cybox|Description").text(), "46.183.221.58, port 80");
				
			System.out.println("Testing Address -> IP reference");
			String ipId = address.select("SocketAddressObj|IP_Address").attr("object_reference");
			Element ipElement = doc.select("[id= " + ipId + "]").first();
			String ip = ipElement.select("AddressObj|Address_Value").text();
			System.out.println("Testing IP content");
			System.out.println("Testing Title");
			assertEquals(ipElement.select("cybox|Title").text(), "IP");
			System.out.println("Testing Source");
			assertEquals(ipElement.select("cyboxCommon|Information_Source_Type").text(), "MalwareDomainList");
			System.out.println("Testing IP Long (ID)");
			assertEquals(ipElement.select("cybox|Object").attr("id"), "stucco:ip-" + ipToLong(ip));
			System.out.println("Testing IP String");
			assertEquals(ip, "46.183.221.58");
			System.out.println("Testing Description");
			assertEquals(ipElement.select("cybox|Description").text(), "46.183.221.58");

			System.out.println("Testing Address -> Port reference");
			String portId = address.select("SocketAddressObj|Port").attr("object_reference");
			Element portElement = doc.select("[id= " + portId + "]").first();
			System.out.println("Testing Title");
			assertEquals(portElement.select("cybox|Title").text(), "Port");
			System.out.println("Testing Source");
			assertEquals(portElement.select("cyboxCommon|Information_Source_Type").text(), "MalwareDomainList");
			System.out.println("Testing Port value");
			assertEquals(portElement.select("PortObj|Port_Value").text(), "80");
			System.out.println("Testing Description");
			assertEquals(portElement.select("cybox|Description").text(), "80");

			System.out.println("Testing Address -> DNSName");
			Elements dnsRefs = address.select("cybox|Related_Object");
			assertTrue(dnsRefs.size() == 1);
			List<String> dnsList = new ArrayList<String>();
			for (Element dnsRef : dnsRefs) {
				String dnsId = dnsRef.attr("idref");
				Element dnsElement = doc.select("[id= " + dnsId + "]").first();
				dnsList.add(dnsElement.select("DomainNameObj|Value").text());
			}
			assertTrue(dnsList.contains("ip-221-58.dataclub.biz."));
			
			System.out.println();
			System.out.println("Testing DNSName");
			Element dnsElement = doc.select("cybox|Observable:has(DomainNameObj|Value:contains(ip-221-58.dataclub.biz.))").first();
			System.out.println("Testing Title");
			assertEquals(dnsElement.select("cybox|title").text(), "DNSName");
			System.out.println("Testing Name");
			assertEquals(dnsElement.select("DomainNameObj|Value").text(), "ip-221-58.dataclub.biz.");
			System.out.println("Testing Description");
			assertEquals(dnsElement.select("cybox|description").text(), "ip-221-58.dataclub.biz.");
			System.out.println("Testing Source");
			assertEquals(dnsElement.select("cyboxcommon|information_source_type").text(), "MalwareDomainList");
				
		} catch (IOException e) {
			e.printStackTrace();
			fail("IOException");
		} catch (Exception e) {
			e.printStackTrace();
			fail("Exception");
		}
	}	

	/**
	 * Test with the newest 10k records available.
	 */
	@Test
	public void test_newest_10k() {
		System.out.println();
		System.out.println("STIXExtractor.MalwareDomainListExtractorTest.test_newest_10k()");
		
		try {
			URL u = new URL("http://www.malwaredomainlist.com/mdl.php?inactive=&sort=Date&search=&colsearch=All&ascordesc=DESC&quantity=10000&page=0");
			String content = IOUtils.toString(u);
			
			MalwareDomainListExtractor mdlTsExt = new MalwareDomainListExtractor(content);
			STIXPackage receivedPackage = mdlTsExt.getStixPackage();
									
			assertTrue(mdlTsExt.validate(receivedPackage));
			//This test just grabs everything and combines it all, so the result won't be predictable (or useful)
			//However, since this is so much more data than usual, it's a very effective way to find errors in the extractor.
		    
		} catch (IOException e) {
			e.printStackTrace();
			fail("IOException");
		} catch (Exception e) {
			e.printStackTrace();
			fail("Exception");
		}
	}
}
